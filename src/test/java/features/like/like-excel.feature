Feature: Like Testing t·ª´ Excel - Sheet like

  Background:
    * url baseUrl
    * def config = karate.call('classpath:karate-config.js')
    * def readExcel = read('classpath:utils/read-excel.js')
    * def writeToExcel = read('classpath:utils/write-excel.js')
    * def excelFilePath = 'src/test/java/data/data.xlsx'
    * def sheetName = 'like'
    * def testData = readExcel(excelFilePath, sheetName)
    * print 'ƒê·ªçc ƒë∆∞·ª£c ' + testData.length + ' test cases t·ª´ Excel sheet: ' + sheetName
    * def testResults = []
    * def globalBearerToken = config.bearerToken
    * print 'S·ª≠ d·ª•ng global bearer token t·ª´ config:', globalBearerToken

  Scenario: Ch·∫°y t·∫•t c·∫£ test cases like t·ª´ Excel
    * def evaluateTestCase = 
      """
      function(testCase, actualStatus, actualResponse) {
        var expectedStatus = testCase.expectedStatus;
        
        // Ki·ªÉm tra Status Code (B·∫Øt bu·ªôc)
        if (actualStatus != expectedStatus) {
          return {
            status: 'FAIL',
            reason: 'Status mismatch: Expected ' + expectedStatus + ', got ' + actualStatus
          };
        }
        
        // N·∫øu status code kh·ªõp th√¨ PASS
        return {
          status: 'PASS',
          reason: 'All validations passed'
        };
      }
      """

    * def runTest = 
      """
      function(testCase, index) {
        karate.log('ƒêang ch·∫°y test case #' + (index + 1) + ': ' + testCase.testDescription);
        
        var bearerToken = '';
        
        // S·ª≠ d·ª•ng bearer token t·ª´ test case ho·∫∑c global config
        if (testCase.bearerToken && testCase.bearerToken.trim() !== '') {
          if (testCase.bearerToken === 'NO_TOKEN') {
            // TC4: Kh√¥ng c√≥ token
            bearerToken = '';
            karate.log('Test case kh√¥ng s·ª≠ d·ª•ng token');
          } else if (testCase.bearerToken === 'INVALID_TOKEN') {
            // TC5: Token kh√¥ng h·ª£p l·ªá
            bearerToken = 'invalid_token_123';
            karate.log('Test case s·ª≠ d·ª•ng token kh√¥ng h·ª£p l·ªá');
          } else {
            // S·ª≠ d·ª•ng token t·ª´ Excel n·∫øu c√≥
            bearerToken = testCase.bearerToken;
            karate.log('S·ª≠ d·ª•ng bearer token t·ª´ Excel:', bearerToken);
          }
        } else {
          // S·ª≠ d·ª•ng global token t·ª´ config
          bearerToken = globalBearerToken;
          karate.log('S·ª≠ d·ª•ng global bearer token t·ª´ config:', bearerToken);
        }
        
        // G·ªçi API like (type c·ªë ƒë·ªãnh l√† "post")
        var response = karate.call('classpath:features/helpers/like-single-call.feature', {
          bearerToken: bearerToken,
          targetId: testCase.targetId || ''
        });
        
        var actualStatus = response.actualStatus;
        var actualResult = '';
        
        // Ghi response th·ª±c t·∫ø v√†o result
        if (response.actualResponse) {
          actualResult = JSON.stringify(response.actualResponse);
        } else {
          actualResult = 'No response body';
        }
        
        // ===== ƒê√ÅNH GI√Å TEST CASE =====
        var testEvaluation = evaluateTestCase(testCase, actualStatus, response.actualResponse);
        
        if (testEvaluation.status === 'PASS') {
          karate.log('‚úÖ TEST PASSED - ' + testEvaluation.reason);
        } else {
          karate.log('‚ùå TEST FAILED - ' + testEvaluation.reason);
        }
        
        karate.log('Test case #' + (index + 1) + ' - Status: ' + actualStatus + ', Result: ' + actualResult);
        
        return {
          responseStatus: actualStatus,
          result: actualResult,
          testStatus: testEvaluation.status,
          failureReason: testEvaluation.reason
        };
      }
      """
    
    * print 'B·∫Øt ƒë·∫ßu ch·∫°y t·ª´ng test case...'
    * def results = karate.map(testData, runTest)
    * def testResults = results
    * print 'Ho√†n th√†nh t·∫•t c·∫£ test cases like. ƒêang ghi k·∫øt qu·∫£ v√†o Excel...'
    
    # ===== TH·ªêNG K√ä TEST RESULTS =====
    * def passedTests = karate.filter(testResults, function(item) { return item.testStatus === 'PASS'; })
    * def failedTests = karate.filter(testResults, function(item) { return item.testStatus === 'FAIL'; })
    * def totalTests = testResults.length
    * def passedCount = passedTests.length
    * def failedCount = failedTests.length
    * def successRate = Math.round((passedCount / totalTests) * 100 * 100) / 100

    # Log th·ªëng k√™ t·ªïng quan
    * karate.log('üìä ===== TH·ªêNG K√ä LIKE API TESTING =====')
    * karate.log('üìà T·ªïng s·ªë test cases: ' + totalTests)
    * karate.log('‚úÖ PASSED: ' + passedCount + ' test cases')
    * karate.log('‚ùå FAILED: ' + failedCount + ' test cases')
    * karate.log('üìä Success Rate: ' + successRate + '%')
    * karate.log('üèÅ ===== END STATISTICS =====')

    # Log failed tests
    * if (failedTests.length > 0) karate.forEach(failedTests, function(test, index) { karate.log('‚ùå Failed test #' + (index + 1) + ': ' + test.failureReason); })
    
    * print 'Ghi k·∫øt qu·∫£ v√†o Excel...'
    * def writeSuccess = writeToExcel(excelFilePath, sheetName, testResults)
    * if (writeSuccess) karate.log('ƒê√£ ghi k·∫øt qu·∫£ like v√†o Excel th√†nh c√¥ng!')
    * if (!writeSuccess) karate.log('L·ªói khi ghi k·∫øt qu·∫£ like v√†o Excel!') 