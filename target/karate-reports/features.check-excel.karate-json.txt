{"failedCount":1,"prefixedPath":"classpath:features\/check-excel.feature","packageQualifiedName":"features.check-excel","loopIndex":-1,"relativePath":"features\/check-excel.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":30012300,"errorMessage":"js failed:\n>>>>\n01: karate.call('file:check-excel.js')\n<<<<\norg.graalvm.polyglot.PolyglotException: js failed:\n>>>>\n01: (var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\n02: var FileInputStream = Java.type('java.io.FileInputStream');\n03: \n04: function readExcel() {\n05:     try {\n06:         var filePath = 'src\/test\/java\/data\/data.xlsx';\n07:         var fis = new FileInputStream(filePath);\n08:         var workbook = new ExcelJS(fis);\n09: \n10:         \/\/ Đọc sheet login\n11:         var loginSheet = workbook.getSheet('login');\n12:         karate.log('=== LOGIN SHEET ===');\n13:         karate.log('Headers: email | password | expectedStatus | expectedResult | testDescription | responseStatus | result');\n14: \n15:         for (var i = 1; i <= loginSheet.getLastRowNum(); i++) {\n16:             var row = loginSheet.getRow(i);\n17:             if (row != null) {\n18:                 var email = row.getCell(0) ? row.getCell(0).toString() : '';\n19:                 var password = row.getCell(1) ? row.getCell(1).toString() : '';\n20:                 var expectedStatus = row.getCell(2) ? row.getCell(2).toString() : '';\n21:                 var expectedResult = row.getCell(3) ? row.getCell(3).toString() : '';\n22:                 var testDescription = row.getCell(4) ? row.getCell(4).toString() : '';\n23:                 var responseStatus = row.getCell(5) ? row.getCell(5).toString() : '';\n24:                 var result = row.getCell(6) ? row.getCell(6).toString() : '';\n25: \n26:                 karate.log('Row ' + i + ': ' + email + ' | ' + password + ' | ' + expectedStatus + ' | ' + expectedResult + ' | ' + testDescription + ' | ' + responseStatus + ' | ' + result);\n27:             }\n28:         }\n29: \n30:         fis.close();\n31:         workbook.close();\n32: \n33:     } catch (e) {\n34:         karate.log('Error reading Excel: ' + e.message);\n35:     }\n36: }\n37: \n38: readExcel(); )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:1:1 Expected an operand but found var\r\n(var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\r\n ^\nUnnamed:38:13 Expected ; but found )\r\nreadExcel(); )\r\n             ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:425)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1286)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1288)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n- <js>.:program(Unnamed:1)\n\nclasspath:features\/check-excel.feature:4","startTime":1750074482760,"endTime":1750074482790,"millis":30.0123,"status":"failed"},"step":{"line":4,"prefix":"*","index":0,"text":"karate.call('file:check-excel.js')"},"stepLog":"18:48:02.728 karate.env system property was: null \n18:48:02.794 classpath:features\/check-excel.feature:4\n* karate.call('file:check-excel.js')\njs failed:\n>>>>\n01: karate.call('file:check-excel.js')\n<<<<\norg.graalvm.polyglot.PolyglotException: js failed:\n>>>>\n01: (var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\n02: var FileInputStream = Java.type('java.io.FileInputStream');\n03: \n04: function readExcel() {\n05:     try {\n06:         var filePath = 'src\/test\/java\/data\/data.xlsx';\n07:         var fis = new FileInputStream(filePath);\n08:         var workbook = new ExcelJS(fis);\n09: \n10:         \/\/ Đọc sheet login\n11:         var loginSheet = workbook.getSheet('login');\n12:         karate.log('=== LOGIN SHEET ===');\n13:         karate.log('Headers: email | password | expectedStatus | expectedResult | testDescription | responseStatus | result');\n14: \n15:         for (var i = 1; i <= loginSheet.getLastRowNum(); i++) {\n16:             var row = loginSheet.getRow(i);\n17:             if (row != null) {\n18:                 var email = row.getCell(0) ? row.getCell(0).toString() : '';\n19:                 var password = row.getCell(1) ? row.getCell(1).toString() : '';\n20:                 var expectedStatus = row.getCell(2) ? row.getCell(2).toString() : '';\n21:                 var expectedResult = row.getCell(3) ? row.getCell(3).toString() : '';\n22:                 var testDescription = row.getCell(4) ? row.getCell(4).toString() : '';\n23:                 var responseStatus = row.getCell(5) ? row.getCell(5).toString() : '';\n24:                 var result = row.getCell(6) ? row.getCell(6).toString() : '';\n25: \n26:                 karate.log('Row ' + i + ': ' + email + ' | ' + password + ' | ' + expectedStatus + ' | ' + expectedResult + ' | ' + testDescription + ' | ' + responseStatus + ' | ' + result);\n27:             }\n28:         }\n29: \n30:         fis.close();\n31:         workbook.close();\n32: \n33:     } catch (e) {\n34:         karate.log('Error reading Excel: ' + e.message);\n35:     }\n36: }\n37: \n38: readExcel(); )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:1:1 Expected an operand but found var\r\n(var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\r\n ^\nUnnamed:38:13 Expected ; but found )\r\nreadExcel(); )\r\n             ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:425)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1286)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1288)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n- <js>.:program(Unnamed:1)\n\nclasspath:features\/check-excel.feature:4\n"}],"line":3,"description":"","durationMillis":30.0123,"failed":true,"error":"js failed:\n>>>>\n01: karate.call('file:check-excel.js')\n<<<<\norg.graalvm.polyglot.PolyglotException: js failed:\n>>>>\n01: (var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\n02: var FileInputStream = Java.type('java.io.FileInputStream');\n03: \n04: function readExcel() {\n05:     try {\n06:         var filePath = 'src\/test\/java\/data\/data.xlsx';\n07:         var fis = new FileInputStream(filePath);\n08:         var workbook = new ExcelJS(fis);\n09: \n10:         \/\/ Đọc sheet login\n11:         var loginSheet = workbook.getSheet('login');\n12:         karate.log('=== LOGIN SHEET ===');\n13:         karate.log('Headers: email | password | expectedStatus | expectedResult | testDescription | responseStatus | result');\n14: \n15:         for (var i = 1; i <= loginSheet.getLastRowNum(); i++) {\n16:             var row = loginSheet.getRow(i);\n17:             if (row != null) {\n18:                 var email = row.getCell(0) ? row.getCell(0).toString() : '';\n19:                 var password = row.getCell(1) ? row.getCell(1).toString() : '';\n20:                 var expectedStatus = row.getCell(2) ? row.getCell(2).toString() : '';\n21:                 var expectedResult = row.getCell(3) ? row.getCell(3).toString() : '';\n22:                 var testDescription = row.getCell(4) ? row.getCell(4).toString() : '';\n23:                 var responseStatus = row.getCell(5) ? row.getCell(5).toString() : '';\n24:                 var result = row.getCell(6) ? row.getCell(6).toString() : '';\n25: \n26:                 karate.log('Row ' + i + ': ' + email + ' | ' + password + ' | ' + expectedStatus + ' | ' + expectedResult + ' | ' + testDescription + ' | ' + responseStatus + ' | ' + result);\n27:             }\n28:         }\n29: \n30:         fis.close();\n31:         workbook.close();\n32: \n33:     } catch (e) {\n34:         karate.log('Error reading Excel: ' + e.message);\n35:     }\n36: }\n37: \n38: readExcel(); )\n<<<<\norg.graalvm.polyglot.PolyglotException: SyntaxError: Unnamed:1:1 Expected an operand but found var\r\n(var ExcelJS = Java.type('org.apache.poi.xssf.usermodel.XSSFWorkbook');\r\n ^\nUnnamed:38:13 Expected ; but found )\r\nreadExcel(); )\r\n             ^\n\n- org.graalvm.polyglot.Context.eval(Context.java:425)\n- com.intuit.karate.graal.JsEngine.evalForValue(JsEngine.java:169)\n- com.intuit.karate.graal.JsEngine.eval(JsEngine.java:165)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1286)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n\n- com.intuit.karate.graal.JsEngine.fromJsEvalException(JsEngine.java:253)\n- com.intuit.karate.core.ScenarioEngine.evalJs(ScenarioEngine.java:1288)\n- com.intuit.karate.core.ScenarioFileReader.readFile(ScenarioFileReader.java:59)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:164)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:151)\n- <js>.:program(Unnamed:1)\n\nclasspath:features\/check-excel.feature:4","executorName":"main","name":"Đọc nội dung Excel sau khi test","startTime":1750074482599,"refId":"[1:3]","endTime":1750074482795,"exampleIndex":-1}],"callDepth":0,"name":"Check Excel Content","description":"","resultDate":"2025-06-16 06:48:02 PM","durationMillis":30.0123,"passedCount":0}